rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Anyone can read user documents (only public fields are stored)
      allow read: if true;

      // Each user may write only their own document
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Conversations collection rules
    match /conversations/{conversationId} {
      // Allow querying conversations where user is a participant
      allow list: if request.auth != null;
      
      // Users can read conversations they are a participant in, or check if they exist
      allow read: if request.auth != null 
        && (
          // If conversation exists, check if user is participant
          (resource != null && request.auth.uid in resource.data.participantIds)
          // Or allow reading to check existence (will return null if doesn't exist)
          || resource == null
        );
      
      // Users can create conversations where they are a participant
      allow create: if request.auth != null 
        && request.auth.uid in request.resource.data.participantIds
        && request.resource.data.participantIds is list
        && request.resource.data.participantIds.size() >= 1  // Allow self-conversations for testing
        && request.resource.data.participantIds.size() <= 50; // Max 50 participants
      
      // Users can update conversations they are a participant in
      allow update: if request.auth != null 
        && request.auth.uid in resource.data.participantIds
        && request.auth.uid in request.resource.data.participantIds;
      
      // Users can delete conversations they are a participant in (for leaving groups)
      allow delete: if request.auth != null 
        && request.auth.uid in resource.data.participantIds;
    }
    
    // Messages collection rules
    match /messages/{messageId} {
      // Allow querying messages by conversationId for participants
      allow list: if request.auth != null 
        && request.query != null
        && 'conversationId' in request.query
        && (
          // If conversation exists, check if user is participant
          (conversationExists(request.query.conversationId)
           && request.auth.uid in getConversationParticipants(request.query.conversationId))
          // Or allow if conversation doesn't exist yet (empty query results)
          || !conversationExists(request.query.conversationId)
        );
      
      // Users can read messages in conversations they are a participant in
      allow read: if request.auth != null 
        && (conversationExists(resource.data.conversationId) 
            && request.auth.uid in getConversationParticipants(resource.data.conversationId));
      
      // Users can create messages in conversations they are a participant in
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.senderId
        && conversationExists(request.resource.data.conversationId)
        && request.auth.uid in getConversationParticipants(request.resource.data.conversationId)
        && request.resource.data.senderId is string
        && request.resource.data.conversationId is string
        && request.resource.data.sentAt is timestamp;
      
      // Users can update messages they sent (for marking as viewed)
      allow update: if request.auth != null 
        && (
          // Sender can update their own message
          request.auth.uid == resource.data.senderId
          // Or participant can update viewedBy array
          || (conversationExists(resource.data.conversationId)
              && request.auth.uid in getConversationParticipants(resource.data.conversationId)
              && onlyUpdatingViewedBy())
        );
      
      // Users can delete messages they sent
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.senderId;
    }
    
    // Helper function to check if a conversation exists
    function conversationExists(conversationId) {
      return exists(/databases/$(database)/documents/conversations/$(conversationId));
    }
    
    // Helper function to get conversation participants
    function getConversationParticipants(conversationId) {
      return get(/databases/$(database)/documents/conversations/$(conversationId)).data.participantIds;
    }
    
    // Helper function to check if only viewedBy is being updated
    function onlyUpdatingViewedBy() {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(['viewedBy']);
    }
    
    // Stories collection rules
    match /stories/{storyId} {
      // Allow authenticated users to read friends' stories; filtering is
      // handled client-side.
      allow read: if request.auth != null;

      /*
       * A user may create / update / delete the document whose ID matches
       * their UID. We no longer rely on a redundant `userId` field, keeping
       * the document lean and avoiding data duplication.
       */
      allow create, update, delete: if request.auth != null && storyId == request.auth.uid;
    }
    
    // Friend requests collection (for future use)
    match /friendRequests/{requestId} {
      // Users can read friend requests sent to them or by them
      allow read: if request.auth != null 
        && (request.auth.uid == resource.data.fromUserId 
            || request.auth.uid == resource.data.toUserId);
      
      // Users can create friend requests
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.fromUserId;
      
      // Users can update friend requests sent to them (accept/decline)
      allow update: if request.auth != null 
        && request.auth.uid == resource.data.toUserId;
      
      // Users can delete friend requests they sent
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.fromUserId;
    }
  }
} 