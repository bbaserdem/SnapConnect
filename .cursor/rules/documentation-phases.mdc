---
description: Guide for generating, and conventions, around phases
globs: _docs/phases/**.md
---

# Rule: Project Documentation

## Goal

To divide the project goals into an organized list that can be followed sequentially to build the app.
The first two phases, phase 0 and 1, are special.
Each phase beyond 1 should focus on one major feature.

## Phase conventions

Each phase is numbered, and consists of numbered tasks with numbered subtasks.
Each phase can be referred to as phase X, where X is the phase number.
Each task in a given phase can be referred to as `phase X.Y`. e.g. phase 1.2 means phase 1 task 2
Similarly, subtasks can be referred to as `phase X.Y.Z`
Never assume the use of non-integer values as phases; never interpret the dot as a decimal place.

## Phase 0: Dev environment

Phase 0 consists of creating a dev environment.
The tasks are the steps to make sure development can happen and all the required tech stack are in place.
The dev environment will be in NixOS, and the main management will be done through the nix package manager.
It involves creating a `flake.nix` and creating a dev shell inside of it.
Shell environments will be loaded using the direnv tool, which is assumed to be configured on the OS end.
This phase includes putting the necessary API keys to the gitignored .env.local file.

## Phase 1: MVP

Phase 1 consists of creating a minimum viable product.
This means the base of the project is in place; and the project is ready for deployment.

## Process

1.  **Receive Initial Prompt:** The user provides a PRD, or requests for a new feature or functionality.
2.  **Ask Clarifying Questions:** Before breaking the features down to phases, the AI *must* ask clarifying questions to gather sufficient detail.
3.  **Generate Phase outline:** Based on the initial prompt and the user's answers to the clarifying questions,
    generate phases using the structure outlined below.
4.  **Save PRD:** Save each phase in a file `<N>-<feature>.md` inside the `/_docs/phases` directory.
    Here, <N> stands for the phase number, and <feature> stands for the feature description.
    In the case for the first two phases, these would be `0-dev-environment.md` and `1-mvp.md` files.
5.  After implementing a task, create a corresponding file in `/_docs/test` directory named `<P>.<T>-test.md` where P is the phase number and T is the test number.
    This will be a checklist for the user to check by hand to see if things are working.

## Target Audience

Assume the primary reader of the PRD is a **junior developer**. Therefore, requirements should be explicit, unambiguous, and avoid jargon where possible. Provide enough detail for them to understand the feature's purpose and core logic.

## Output

*   **Format:** Markdown (`.md`)
*   **Location:** `/_docs/phases`
*   **Filename:** `<N>-<feature>.md`

## Final instructions

1. Do NOT change the phase document after generation, unless prompted specifically by the developer.
2. During development, only change tasks that are not currently being worked on.
